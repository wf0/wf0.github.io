import{_ as a,c as s,a5 as e,o as n}from"./chunks/framework.Blj2-Ajd.js";import"./chunks/theme.CmCrfLpF.js";const l="/logo.svg",t="/jiagou.png",r="/demo.gif",p="/import-file.gif",o="/drag-file.gif",h="/drag-demo.gif",d="/search-result.gif",c="/qq.png",q=JSON.parse('{"title":"Unicode-IDE 在线代码编辑器","description":"","frontmatter":{},"headers":[],"relativePath":"example/unicode-ide.md","filePath":"example/unicode-ide.md","lastUpdated":1736734047000}'),k={name:"example/unicode-ide.md"};function g(u,i,m,f,b,F){return n(),s("div",null,i[0]||(i[0]=[e('<h1 id="unicode-ide-在线代码编辑器" tabindex="-1">Unicode-IDE 在线代码编辑器 <a class="header-anchor" href="#unicode-ide-在线代码编辑器" aria-label="Permalink to &quot;Unicode-IDE 在线代码编辑器&quot;">​</a></h1><p align="center"><img src="'+l+'"></p><h2 id="技术说明" tabindex="-1">技术说明 <a class="header-anchor" href="#技术说明" aria-label="Permalink to &quot;技术说明&quot;">​</a></h2><ul><li><p><strong>Monaco Editor</strong></p><ul><li><a href="https://wf0.github.io/" target="_blank" rel="noreferrer">译文链接</a></li><li>负责代码编辑、冲突模型处理等有关代码文件事项；</li></ul></li><li><p><strong>WebContainer</strong></p><ul><li><a href="https://webcontainers.io/" target="_blank" rel="noreferrer">官网链接</a></li><li>是整个 Web 运行项目的核心，提供了直接运行 js 文件的能力，同时具备 Node API，可执行相关 npm i 、npm run dev 等命令；同时，完备的 FileSystemAPI 也是整个项目的关键，提供的文件操作 API，提供 Web 可直接操作文件，包括新建文件、重命名、删除文件、读取目录等多项能力；</li></ul></li><li><p><strong>Vue-Web-Terminal</strong></p><ul><li><a href="https://tzfun.github.io/vue-web-terminal/zh/" target="_blank" rel="noreferrer">官网链接</a></li><li>一个由 Vue 构建的支持多内容格式显示的网页端命令行窗口插件，支持表格、json、代码等多种消息格式，支持自定义消息样式、命令行库、键入搜索提示等，模拟原生终端窗口支持 ← → 光标切换和 ↑ ↓ 历史命令切换。</li></ul></li></ul><h2 id="系统架构图" tabindex="-1">系统架构图 <a class="header-anchor" href="#系统架构图" aria-label="Permalink to &quot;系统架构图&quot;">​</a></h2><p><img src="'+t+`" alt="系统架构"></p><ul><li><p>如上图，WebContainer 及 MonacoEditor 是整个系统的核心模块，通过 File System API，进行文件操作，与页面展示层（Element Tree）进行交互，提供了虚拟文件的可视化功能；同时，启动后的服务，通过回传 iframe 实现页面展示；</p></li><li><p>对 Terminal 而言，主要就是通过 terminal 的输入命令与 spawn 的交互，实现命令执行、回显；</p></li><li><p>而 Monaco Editor 则是从 web Container 中的文件关系进行文件读取编辑，保存后重新回写到 Container 中。</p></li></ul><h2 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##  克隆仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/wfeng0/unicode-ide.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##  推荐使用pnpm进行依赖管理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##  本地运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##  如果提交代码，请先执行 lint 与 build 命令进行代码检查与打包 ，确认没错误后再提交。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="整体效果" tabindex="-1">整体效果 <a class="header-anchor" href="#整体效果" aria-label="Permalink to &quot;整体效果&quot;">​</a></h2><img src="`+r+'"><h2 id="功能列表" tabindex="-1">功能列表 <a class="header-anchor" href="#功能列表" aria-label="Permalink to &quot;功能列表&quot;">​</a></h2><ul><li><p>新建文件/文件夹、重命名、删除文件、拖拽更换文件位置</p></li><li><p>文件 icon 图标显示、文件内容编辑与保存</p></li><li><p>命令执行、项目运行、编译 <code>例如：node index.js 、 npm run dev 、 ls 、 cd .. 、 mkdir...</code></p></li><li><p>多 tab 文件展示、格式化代码、代码高亮显示</p></li><li><p><strong>文件导入、文件夹拖拽识别文件</strong><img src="'+p+'"></p></li><li><p><strong>拖拽上传文件夹</strong><img src="'+o+'"></p></li><li><p>拖拽实现区域缩放 <img src="'+h+'"></p></li><li><p>文件搜索并跳转 <img src="'+d+'"></p></li></ul><h2 id="计划开发" tabindex="-1">计划开发 <a class="header-anchor" href="#计划开发" aria-label="Permalink to &quot;计划开发&quot;">​</a></h2><ul><li>插件系统</li><li>diff 代码冲突模型对比</li><li>Monaco Editor 协同编辑</li><li>对图片、makrdown等资源提供支持，并提供 preview 功能</li><li>支持外部拖拽图片等其他媒体文件放置到文件树中</li></ul><h2 id="联系交流" tabindex="-1">联系交流 <a class="header-anchor" href="#联系交流" aria-label="Permalink to &quot;联系交流&quot;">​</a></h2><p>如果对项目优化或功能有好的想法并乐意贡献代码欢迎提交<a href="https://gitee.com/wfeng0/unicode-ide/pulls" target="_blank" rel="noreferrer">PR</a> ，对项目使用存在疑问或发现 bug 请提交<a href="https://gitee.com/wfeng0/unicode-ide/issues" target="_blank" rel="noreferrer">issue</a>。</p><p>欢迎大家加入 QQ 群，不限于 Socket.IO、前端技术、Node 等，都可以进行沟通交流哦~</p><p>仓库有 master/master-alpha 两个分支，master 是稳定版本， master-alpha 是最新版本，大家按需拉取。</p><p><img src="'+c+'" alt="qq群"></p>',20)]))}const C=a(k,[["render",g]]);export{q as __pageData,C as default};

import{c as h,I as i,j as a,a as r,a6 as e,o,D as s}from"./chunks/framework.CYBeC69b.js";const p=a("h1",{id:"uri",tabindex:"-1"},[r("Uri "),a("a",{class:"header-anchor",href:"#uri","aria-label":'Permalink to "Uri"'},"​")],-1),c=e(`<details class="details custom-block"><summary>原文链接</summary><p><a href="https://microsoft.github.io/monaco-editor/docs.html#classes/Uri.html" target="_blank" rel="noreferrer">https://microsoft.github.io/monaco-editor/docs.html#classes/Uri.html</a></p></details><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>foo://example.com:8042/over/there?name=ferret#nose</span></span>
<span class="line"><span>      \\_/   \\______________/\\_________/ \\_________/ \\__/</span></span>
<span class="line"><span>       |           |            |            |        |</span></span>
<span class="line"><span>    scheme     authority       path        query   fragment</span></span>
<span class="line"><span>       |   _____________________|__</span></span>
<span class="line"><span>      / \\ /                        \\</span></span>
<span class="line"><span>      urn:example:animal:ferret:nose</span></span></code></pre></div><h2 id="快捷链接" tabindex="-1">快捷链接 <a class="header-anchor" href="#快捷链接" aria-label="Permalink to &quot;快捷链接&quot;">​</a></h2>`,3),d=e(`<h2 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h2><ul><li><a href="/api/UriComponents.html">UriComponents</a></li></ul><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): Uri</span></span></code></pre></div><h2 id="authority" tabindex="-1">authority <a class="header-anchor" href="#authority" aria-label="Permalink to &quot;authority&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: authority是 www.example.com , <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; host+port 部分。</li><li>示例：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//www.example.com/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">authority	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	www.example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	www.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//255.255.255.255:8080/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">authority	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	255.255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255.255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	255.255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255.255</span></span></code></pre></div><h2 id="fragment" tabindex="-1">fragment <a class="header-anchor" href="#fragment" aria-label="Permalink to &quot;fragment&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: fragment是 <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; #fragment</li></ul><h2 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: path是 <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; /some/path</li></ul><h2 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: query是 <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; ?query</li></ul><h2 id="scheme" tabindex="-1">scheme <a class="header-anchor" href="#scheme" aria-label="Permalink to &quot;scheme&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: scheme是 <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; http</li></ul><h2 id="fspath" tabindex="-1">fsPath <a class="header-anchor" href="#fspath" aria-label="Permalink to &quot;fsPath&quot;">​</a></h2><ul><li>类型: <code>string</code></li><li>描述: fsPath是 <a href="http://www.example.com/some/path?query#fragment" target="_blank" rel="noreferrer">http://www.example.com/some/path?query#fragment</a> ==&gt; /some/path</li></ul><h2 id="tojson" tabindex="-1">toJSON <a class="header-anchor" href="#tojson" aria-label="Permalink to &quot;toJSON&quot;">​</a></h2><ul><li>语法: <code>() =&gt; </code><a href="/api/UriComponents.html">UriComponents</a></li><li>描述: 将 Uri 转换为 JSON, 可快速获取 query、path等属性</li></ul><h2 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h2><ul><li>语法: <code>(skipEncoding?: boolean) =&gt; string</code></li><li>参数：<code>skipEncoding</code>: <code>是否对结果进行编码</code></li><li>描述: 将 Uri 转换为字符串</li></ul><h2 id="with" tabindex="-1">with <a class="header-anchor" href="#with" aria-label="Permalink to &quot;with&quot;">​</a></h2><ul><li>语法: <code>with(change): Uri</code></li><li>参数： <ul><li><code>authority</code>:<code>string</code>;</li><li><code>fragment</code>:<code>string</code>;</li><li><code>path</code>:<code>string</code>;</li><li><code>query</code>:<code>string</code>;</li><li><code>scheme</code>:<code>string</code>;</li></ul></li><li>描述: 创建一个新的 Uri，使用提供的参数替换当前 Uri 的参数</li></ul><h2 id="file" tabindex="-1">file <a class="header-anchor" href="#file" aria-label="Permalink to &quot;file&quot;">​</a></h2><ul><li>语法：<code>file(path): Uri</code></li><li>参数：<code>path</code>:<code>string</code> 详见 <a href="/api/Uri.html#fspath">fsPath</a>;</li><li>描述：创建一个文件 Uri</li><li>示例：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> good</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uri.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/coding/c#/project1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">good.scheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">good.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/coding/c#/project1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">good.fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uri.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file://&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/coding/c#/project1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bad.scheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bad.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/coding/c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// path is now broken</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bad.fragment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/project1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="from" tabindex="-1">from <a class="header-anchor" href="#from" aria-label="Permalink to &quot;from&quot;">​</a></h2><ul><li>语法：<code>from(components, strict?): Uri</code></li><li>参数： <ul><li><code>components</code>:<a href="/api/UriComponents.html">UriComponents</a>;</li><li><code>strict</code>:<code>boolean</code>;</li></ul></li></ul><h2 id="isuri" tabindex="-1">isUri <a class="header-anchor" href="#isuri" aria-label="Permalink to &quot;isUri&quot;">​</a></h2><ul><li>语法：<code>isUri(thing): boolean</code></li><li>参数：<code>thing</code>:<code>any</code>;</li><li>描述：判断是否为 Uri</li></ul><h2 id="joinpath" tabindex="-1">joinPath <a class="header-anchor" href="#joinpath" aria-label="Permalink to &quot;joinPath&quot;">​</a></h2><ul><li>语法：<code>joinPath(uri: Uri, ...pathFragment: string[]): Uri</code></li><li>参数： <ul><li><code>uri</code>:<code>Uri</code>;</li><li><code>pathFragment</code>:<code>string[]</code>;</li></ul></li><li>描述：将多个路径片段拼接成一个 Uri</li></ul><h2 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h2><ul><li>语法：<code>revive(value: string, _strict?: boolean): Uri</code></li><li>参数： <ul><li><code>value</code>:<code>string</code>;</li><li><code>_strict</code>:<code>boolean</code>;</li></ul></li><li>描述：将字符串解析为 Uri</li></ul><h2 id="revive" tabindex="-1">revive <a class="header-anchor" href="#revive" aria-label="Permalink to &quot;revive&quot;">​</a></h2><ul><li>语法：<code>revive(data): Uri</code></li><li>参数：<code>data</code>:<code> Uri | UriComponents</code>;</li><li>描述：将 UriComponents 转换为 Uri</li></ul>`,36),y=JSON.parse('{"title":"Uri","description":"","frontmatter":{},"headers":[],"relativePath":"api/Uri.md","filePath":"api/Uri.md","lastUpdated":1720599564000}'),k={name:"api/Uri.md"},_=Object.assign(k,{setup(g){const t=[{icon:"C",link:"constructor"},{icon:"P",link:"authority"},{icon:"P",link:"fragment"},{icon:"P",link:"path"},{icon:"P",link:"query"},{icon:"P",link:"scheme"},{icon:"A",link:"fsPath"},{icon:"M",link:"toJSON"},{icon:"M",link:"toString"},{icon:"M",link:"with"},{icon:"M",link:"file"},{icon:"M",link:"from"},{icon:"M",link:"isUri"},{icon:"M",link:"joinPath"},{icon:"M",link:"parse"},{icon:"M",link:"revive"}];return(m,u)=>{const l=s("backTop"),n=s("dataItems");return o(),h("div",null,[p,i(l),c,i(n,{data:t}),d])}}});export{y as __pageData,_ as default};
